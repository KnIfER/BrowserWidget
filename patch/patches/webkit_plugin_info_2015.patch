diff --git third_party/blink/public/mojom/plugins/plugin_registry.mojom third_party/blink/public/mojom/plugins/plugin_registry.mojom
index 92e9cb865204..4628c56882b4 100644
--- third_party/blink/public/mojom/plugins/plugin_registry.mojom
+++ third_party/blink/public/mojom/plugins/plugin_registry.mojom
@@ -34,5 +34,5 @@ interface PluginRegistry {
   //
   // TODO(crbug.com/850278): We shouldn't rely on the renderer to tell us the main frame origin.
   [Sync]
-  GetPlugins(bool refresh, url.mojom.Origin main_frame_origin) => (array<PluginInfo> plugins);
+  GetPlugins(bool refresh, bool is_main_frame, url.mojom.Origin main_frame_origin) => (array<PluginInfo> plugins);
 };
diff --git third_party/blink/public/platform/platform.h third_party/blink/public/platform/platform.h
index ea54e3d6ce90..a36f0e222119 100644
--- third_party/blink/public/platform/platform.h
+++ third_party/blink/public/platform/platform.h
@@ -706,6 +706,11 @@ class BLINK_PLATFORM_EXPORT Platform {
   // runs during Chromium's build step).
   virtual bool IsTakingV8ContextSnapshot() { return false; }
 
+  // DevTools ------------------------------------------------------------
+
+  virtual void DevToolsAgentAttached() {}
+  virtual void DevToolsAgentDetached() {}
+
  protected:
   Platform();
   virtual ~Platform();
diff --git third_party/blink/renderer/core/dom/dom_implementation.cc third_party/blink/renderer/core/dom/dom_implementation.cc
index a2fbf84747aa..8ab120155ccd 100644
--- third_party/blink/renderer/core/dom/dom_implementation.cc
+++ third_party/blink/renderer/core/dom/dom_implementation.cc
@@ -243,10 +243,11 @@ Document* DOMImplementation::createDocument(const String& type,
     if (init.GetFrame()->IsMainFrame()) {
       scoped_refptr<const SecurityOrigin> origin =
           SecurityOrigin::Create(init.Url());
-      plugin_data = init.GetFrame()->GetPage()->GetPluginData(origin.get());
+      plugin_data = init.GetFrame()->GetPage()->GetPluginData(true,
+                                                              origin.get());
     } else {
       plugin_data =
-          init.GetFrame()->GetPage()->GetPluginData(init.GetFrame()
+          init.GetFrame()->GetPage()->GetPluginData(false, init.GetFrame()
                                                         ->Tree()
                                                         .Top()
                                                         .GetSecurityContext()
diff --git third_party/blink/renderer/core/exported/web_dev_tools_agent_impl.cc third_party/blink/renderer/core/exported/web_dev_tools_agent_impl.cc
index 6a9b05fd9c3b..fe63dffe5f92 100644
--- third_party/blink/renderer/core/exported/web_dev_tools_agent_impl.cc
+++ third_party/blink/renderer/core/exported/web_dev_tools_agent_impl.cc
@@ -325,6 +325,8 @@ WebDevToolsAgentImpl::Session::Session(
       &WebDevToolsAgentImpl::Session::Detach, WrapWeakPersistent(this)));
 
   InitializeInspectorSession(reattach_state);
+
+  Platform::Current()->DevToolsAgentAttached();
 }
 
 WebDevToolsAgentImpl::Session::~Session() {
@@ -350,6 +352,7 @@ void WebDevToolsAgentImpl::Session::Detach() {
   io_session_->DeleteSoon();
   io_session_ = nullptr;
   inspector_session_->Dispose();
+  Platform::Current()->DevToolsAgentDetached();
 }
 
 void WebDevToolsAgentImpl::Session::SendProtocolResponse(int session_id,
diff --git third_party/blink/renderer/core/frame/local_frame.cc third_party/blink/renderer/core/frame/local_frame.cc
index 11508d7b0d15..2f43b4dca085 100644
--- third_party/blink/renderer/core/frame/local_frame.cc
+++ third_party/blink/renderer/core/frame/local_frame.cc
@@ -1256,7 +1256,7 @@ FrameResourceCoordinator* LocalFrame::GetFrameResourceCoordinator() {
 PluginData* LocalFrame::GetPluginData() const {
   if (!Loader().AllowPlugins(kNotAboutToInstantiatePlugin))
     return nullptr;
-  return GetPage()->GetPluginData(
+  return GetPage()->GetPluginData(IsMainFrame(),
       Tree().Top().GetSecurityContext()->GetSecurityOrigin());
 }
 
diff --git third_party/blink/renderer/core/page/page.cc third_party/blink/renderer/core/page/page.cc
index b7fef98a016e..b658d51f80a0 100644
--- third_party/blink/renderer/core/page/page.cc
+++ third_party/blink/renderer/core/page/page.cc
@@ -163,7 +163,8 @@ Page::Page(PageClients& page_clients)
           OverscrollController::Create(GetVisualViewport(), GetChromeClient())),
       link_highlights_(LinkHighlights::Create(*this)),
       main_frame_(nullptr),
-      plugin_data_(nullptr),
+      plugin_data_main_frame_(nullptr),
+      plugin_data_sub_frame_(nullptr),
       use_counter_(page_clients.chrome_client &&
                            page_clients.chrome_client->IsSVGImageChromeClient()
                        ? UseCounter::kSVGImageContext
@@ -332,21 +333,40 @@ void Page::InitialStyleChanged() {
   }
 }
 
-PluginData* Page::GetPluginData(const SecurityOrigin* main_frame_origin) {
-  if (!plugin_data_)
-    plugin_data_ = PluginData::Create();
+PluginData* Page::GetPluginData(bool is_main_frame,
+                                const SecurityOrigin* main_frame_origin) {
+  if (is_main_frame) {
+    if (!plugin_data_main_frame_)
+      plugin_data_main_frame_ = PluginData::Create();
 
-  if (!plugin_data_->Origin() ||
-      !main_frame_origin->IsSameSchemeHostPort(plugin_data_->Origin()))
-    plugin_data_->UpdatePluginList(main_frame_origin);
+    if (!plugin_data_main_frame_->Origin() ||
+        !main_frame_origin->IsSameSchemeHostPort(
+            plugin_data_main_frame_->Origin())) {
+      plugin_data_main_frame_->UpdatePluginList(true, main_frame_origin);
+    }
+
+    return plugin_data_main_frame_.Get();
+  } else {
+    if (!plugin_data_sub_frame_)
+      plugin_data_sub_frame_ = PluginData::Create();
 
-  return plugin_data_.Get();
+    if (!plugin_data_sub_frame_->Origin() ||
+        !main_frame_origin->IsSameSchemeHostPort(
+            plugin_data_sub_frame_->Origin())) {
+      plugin_data_sub_frame_->UpdatePluginList(false, main_frame_origin);
+    }
+
+    return plugin_data_sub_frame_.Get();
+  }
 }
 
 void Page::ResetPluginData() {
   for (Page* page : AllPages()) {
-    if (page->plugin_data_) {
-      page->plugin_data_->ResetPluginData();
+    if (page->plugin_data_main_frame_ || page->plugin_data_sub_frame_) {
+      if (page->plugin_data_main_frame_)
+        page->plugin_data_main_frame_->ResetPluginData();
+      if (page->plugin_data_sub_frame_)
+        page->plugin_data_sub_frame_->ResetPluginData();
       page->NotifyPluginsChanged();
     }
   }
@@ -733,7 +753,8 @@ void Page::Trace(blink::Visitor* visitor) {
   visitor->Trace(overscroll_controller_);
   visitor->Trace(link_highlights_);
   visitor->Trace(main_frame_);
-  visitor->Trace(plugin_data_);
+  visitor->Trace(plugin_data_main_frame_);
+  visitor->Trace(plugin_data_sub_frame_);
   visitor->Trace(validation_message_client_);
   visitor->Trace(use_counter_);
   visitor->Trace(plugins_changed_observers_);
diff --git third_party/blink/renderer/core/page/page.h third_party/blink/renderer/core/page/page.h
index 06804a1dd062..0d7e84c5530b 100644
--- third_party/blink/renderer/core/page/page.h
+++ third_party/blink/renderer/core/page/page.h
@@ -139,7 +139,8 @@ class CORE_EXPORT Page final : public GarbageCollectedFinalized<Page>,
   ViewportDescription GetViewportDescription() const;
 
   // Returns the plugin data associated with |main_frame_origin|.
-  PluginData* GetPluginData(const SecurityOrigin* main_frame_origin);
+  PluginData* GetPluginData(bool is_main_frame,
+                            const SecurityOrigin* main_frame_origin);
 
   // Resets the plugin data for all pages in the renderer process and notifies
   // PluginsChangedObservers.
@@ -370,7 +371,8 @@ class CORE_EXPORT Page final : public GarbageCollectedFinalized<Page>,
   // longer needed.
   Member<Frame> main_frame_;
 
-  Member<PluginData> plugin_data_;
+  Member<PluginData> plugin_data_main_frame_;
+  Member<PluginData> plugin_data_sub_frame_;
 
   Member<ValidationMessageClient> validation_message_client_;
 
diff --git third_party/blink/renderer/platform/plugins/plugin_data.cc third_party/blink/renderer/platform/plugins/plugin_data.cc
index 0ae2fafa2498..1ed863662584 100644
--- third_party/blink/renderer/platform/plugins/plugin_data.cc
+++ third_party/blink/renderer/platform/plugins/plugin_data.cc
@@ -88,10 +88,12 @@ void PluginData::RefreshBrowserSidePluginCache() {
   Platform::Current()->GetInterfaceProvider()->GetInterface(
       mojo::MakeRequest(&registry));
   Vector<mojom::blink::PluginInfoPtr> plugins;
-  registry->GetPlugins(true, SecurityOrigin::CreateUniqueOpaque(), &plugins);
+  registry->GetPlugins(true, true, SecurityOrigin::CreateUniqueOpaque(),
+                       &plugins);
 }
 
-void PluginData::UpdatePluginList(const SecurityOrigin* main_frame_origin) {
+void PluginData::UpdatePluginList(bool is_main_frame,
+                                  const SecurityOrigin* main_frame_origin) {
   ResetPluginData();
   main_frame_origin_ = main_frame_origin;
 
@@ -99,7 +101,7 @@ void PluginData::UpdatePluginList(const SecurityOrigin* main_frame_origin) {
   Platform::Current()->GetInterfaceProvider()->GetInterface(
       mojo::MakeRequest(&registry));
   Vector<mojom::blink::PluginInfoPtr> plugins;
-  registry->GetPlugins(false, main_frame_origin_, &plugins);
+  registry->GetPlugins(false, is_main_frame, main_frame_origin_, &plugins);
   for (const auto& plugin : plugins) {
     auto* plugin_info =
         new PluginInfo(plugin->name, FilePathToWebString(plugin->filename),
diff --git third_party/blink/renderer/platform/plugins/plugin_data.h third_party/blink/renderer/platform/plugins/plugin_data.h
index f1a78d3e0d5f..f6403f5ac018 100644
--- third_party/blink/renderer/platform/plugins/plugin_data.h
+++ third_party/blink/renderer/platform/plugins/plugin_data.h
@@ -101,7 +101,8 @@ class PLATFORM_EXPORT PluginData final
   const HeapVector<Member<PluginInfo>>& Plugins() const { return plugins_; }
   const HeapVector<Member<MimeClassInfo>>& Mimes() const { return mimes_; }
   const SecurityOrigin* Origin() const { return main_frame_origin_.get(); }
-  void UpdatePluginList(const SecurityOrigin* main_frame_origin);
+  void UpdatePluginList(bool is_main_frame,
+                        const SecurityOrigin* main_frame_origin);
   void ResetPluginData();
 
   bool SupportsMimeType(const String& mime_type) const;
